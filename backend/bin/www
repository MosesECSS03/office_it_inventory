#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const { Server } = require("socket.io");
const io = new Server(server, { 
  cors: { 
    origin: [
      'http://localhost:5173', // Vite dev server
      'http://localhost:3000', // React dev server fallback
      'http://127.0.0.1:5173',
      'http://127.0.0.1:3000',
      'https://jolly-sky-0e8d8b700.2.azurestaticapps.net', // Your Azure frontend
    ],
    credentials: true,
    methods: ['GET', 'POST']
  } 
});
app.set('io', io); // Make io available in routes

io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  socket.on('message', (data) => {
    console.log('Received from client:', data);
    // Echo back or broadcast
    socket.emit('message', 'Hello from Node.js backend!');
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
